// â€“ Carga variables de entorno (.env) â€“
require('dotenv').config();

// â€“ Importaciones â€“
const express     = require('express');
const cors        = require('cors');
const pool        = require('./db');          // tu pool MySQL
const authRoutes  = require('./authRoutes');  // rutas de registro/login
const verifyToken = require('./verifyToken'); // middleware JWT

// â€“ App y middlewares â€“
const app = express();
app.use(cors());
app.use(express.json());

// â€“ Sirve estÃ¡ticos de /public â€“
// (si no usas carpeta public, puedes eliminar esta lÃ­nea)
app.use(express.static('public'));

// â€“ Rutas de autenticaciÃ³n â€“
// Endpoints: POST /api/auth/register, POST /api/auth/login
app.use('/api/auth', authRoutes);

// â€“ Ruta protegida de ejemplo â€“
// Devuelve el payload del JWT si el token es vÃ¡lido
app.get(
  '/api/profile',
  verifyToken,
  (req, res) => {
    res.json({
      message: 'Acceso autorizado ðŸ”’',
      user: req.user   // { userId, email, iat, exp }
    });
  }
);

// â€“ Endpoints pÃºblicos de prueba â€“

// 1) Leer tabla `prueba`
app.get('/api/testdb', async (req, res) => {
  try {
    const [rows] = await pool.query('SELECT * FROM prueba;');
    res.json({ rows });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'FallÃ³ la consulta a la DB' });
  }
});

// 2) Listar usuarios (id, email, username)
app.get('/api/users', async (req, res) => {
  try {
    const [users] = await pool.query(
      'SELECT id, email, username FROM users;'
    );
    res.json({ users });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'FallÃ³ la consulta a usuarios' });
  }
});

// â€“ Sanity check â€“
app.get('/', (req, res) => {
  res.send('API Backxy funcionando correctamente!');
});

// â€“ Iniciar servidor â€“
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Servidor corriendo en puerto ${PORT}`);
});

